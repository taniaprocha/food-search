{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport redaxios from \"redaxios\";\nexport function getSession() {\n  return _getSession.apply(this, arguments);\n}\n\nfunction _getSession() {\n  _getSession = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return redaxios.get(\"/session\");\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getSession.apply(this, arguments);\n}\n\nexport function login(_x, _x2) {\n  return _login.apply(this, arguments);\n}\n\nfunction _login() {\n  _login = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(email, password) {\n    var response;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return redaxios.post(\"/session\", {\n              email: email,\n              password: password\n            });\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _login.apply(this, arguments);\n}\n\nexport function logout() {\n  return _logout.apply(this, arguments);\n}\n\nfunction _logout() {\n  _logout = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var response;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return redaxios[\"delete\"](\"/session\");\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _logout.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/taniarocha/Documents/taniarocha/personal/food-search/frontend/api/auth.js"],"names":["redaxios","getSession","get","response","login","email","password","post","logout"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,gBAAsBC,UAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBD,QAAQ,CAACE,GAAT,CAAa,UAAb,CADlB;;AAAA;AACCC,YAAAA,QADD;AAAA,6CAGEA,QAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBC,KAAtB;AAAA;AAAA;;;mEAAO,kBAAqBC,KAArB,EAA4BC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBN,QAAQ,CAACO,IAAT,CAAc,UAAd,EAA0B;AAAEF,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,QAAQ,EAARA;AAAT,aAA1B,CADlB;;AAAA;AACCH,YAAAA,QADD;AAAA,8CAGEA,QAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,gBAAsBK,MAAtB;AAAA;AAAA;;;oEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBR,QAAQ,UAAR,CAAgB,UAAhB,CADlB;;AAAA;AACCG,YAAAA,QADD;AAAA,8CAGEA,QAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import redaxios from \"redaxios\";\n\nexport async function getSession() {\n  const response = await redaxios.get(\"/session\");\n\n  return response;\n}\n\nexport async function login(email, password) {\n  const response = await redaxios.post(\"/session\", { email, password });\n\n  return response;\n}\n\nexport async function logout() {\n  const response = await redaxios.delete(\"/session\");\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}